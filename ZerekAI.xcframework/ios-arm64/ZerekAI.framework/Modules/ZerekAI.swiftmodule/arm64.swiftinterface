// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ZerekAI
import CoreGraphics
import CoreLocation
import CoreTelephony
import CoreText
import Foundation
import MessageUI
import Photos
import SDWebImage
import SQLite3
import SafariServices
import Swift
import SystemConfiguration
import UIKit
@_exported import ZerekAI
import _Concurrency
public enum APLanguage {
  case en
  case ru
  case kz
  case `default`
  public static func == (a: ZerekAI.APLanguage, b: ZerekAI.APLanguage) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol APViewDelegate : AnyObject {
  func apViewDidUpdateContent(view: ZerekAI.APView)
  func apViewDidTriggerCustomAction(view: ZerekAI.APView, name: Swift.String, parameters: [Swift.String : Any])
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class APView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak public var delegate: ZerekAI.APViewDelegate?
  @_Concurrency.MainActor(unsafe) public var publicationPageKey: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) convenience public init(publicationPageKey: Swift.String)
  @objc deinit
}
extension ZerekAI.APView {
  @_Concurrency.MainActor(unsafe) public func reload()
  @_Concurrency.MainActor(unsafe) public func scrollToStart()
}
public protocol APViewlessDelegate : AnyObject {
  func apViewlessDidFinish(viewless: ZerekAI.APViewless)
  func apViewlessDidTriggerCustomAction(name: Swift.String, parameters: [Swift.String : Any])
}
@_hasMissingDesignatedInitializers public class APViewless {
  weak public var delegate: ZerekAI.APViewlessDelegate?
  public var publicationPageKey: Swift.String {
    get
  }
  convenience public init(publicationPageKey: Swift.String)
  public func preloadContents()
  public func show()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class AnimatedCollectionViewLayout : UIKit.UICollectionViewFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open class var layoutAttributesClass: Swift.AnyClass {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutAttributesForElements(in rect: CoreGraphics.CGRect) -> [UIKit.UICollectionViewLayoutAttributes]?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func shouldInvalidateLayout(forBoundsChange newBounds: CoreGraphics.CGRect) -> Swift.Bool
  @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class AnimatedCollectionViewLayoutAttributes : UIKit.UICollectionViewLayoutAttributes {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class ZerekAISDK {
  public static func initialize(settings: ZerekAI.ZerekAISettings, verbose: Swift.Bool = false)
  public static func showSplashScreen(user: ZerekAI.ZerekAIUser? = nil, hasDrafts: Swift.Bool = false, customActionTriggered: ((_ name: Swift.String, _ parameters: [Swift.String : Any]) -> Swift.Void)? = nil, finished: (() -> Swift.Void)? = nil)
  public static func start(user: ZerekAI.ZerekAIUser? = nil, completion: ((_ started: Swift.Bool) -> Swift.Void)? = nil)
  public static func set(language: ZerekAI.APLanguage)
  public static func getAuthorizationToken() -> Swift.String
  @objc deinit
}
public class ZerekAISettings : Swift.Codable {
  public init(url: Swift.String, clientId: Swift.String, clientSecret: Swift.String, apiKey: Swift.String)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension ZerekAI.ZerekAISettings : Swift.Equatable {
  public static func == (lhs: ZerekAI.ZerekAISettings, rhs: ZerekAI.ZerekAISettings) -> Swift.Bool
}
public class ZerekAIUser : Swift.Codable {
  public enum Gender : Swift.String {
    case male
    case female
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public init(userId: Swift.String? = nil, gender: ZerekAI.ZerekAIUser.Gender? = nil, age: Swift.Int? = nil, userCoordinate: CoreLocation.CLLocationCoordinate2D? = nil, properties: [Swift.String : Swift.String]? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension ZerekAI.ZerekAIUser : Swift.Equatable {
  public static func == (lhs: ZerekAI.ZerekAIUser, rhs: ZerekAI.ZerekAIUser) -> Swift.Bool
}
extension ZerekAI.APLanguage : Swift.Equatable {}
extension ZerekAI.APLanguage : Swift.Hashable {}
extension ZerekAI.ZerekAIUser.Gender : Swift.Equatable {}
extension ZerekAI.ZerekAIUser.Gender : Swift.Hashable {}
extension ZerekAI.ZerekAIUser.Gender : Swift.RawRepresentable {}
